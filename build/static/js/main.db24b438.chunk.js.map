{"version":3,"sources":["Home.js","Api.js","NavBar.js","MenuHook.js","ItemHook.js","AddItemForm.js","my404.js","App.js","serviceWorker.js","index.js"],"names":["Home","className","SnackOrBoozeApi","axios","get","result","data","NavBar","expand","exact","to","navbar","Menu","items","title","linkName","toLowerCase","map","item","id","key","name","Item","cantFind","useParams","find","description","recipe","serve","AddItemForm","add","INITIAL_STATE","useState","formData","setFormData","type","handleChange","evt","target","value","fData","onSubmit","preventDefault","htmlFor","onChange","onClick","alert","My404","src","alt","App","isLoading","setIsLoading","snacks","setSnacks","drinks","setDrinks","useEffect","a","getSnacks","getDrinks","path","uuid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.db24b438.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardBody, CardTitle } from \"reactstrap\";\n\nfunction Home() {\n  return (\n    <section className=\"col-md-8\">\n      <Card>\n        <CardBody className=\"text-center\">\n          <CardTitle>\n            <h3 className=\"font-weight-bold\">\n              Welcome to Silicon Valley's premier dive cafe!\n            </h3>\n          </CardTitle>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default Home;\n","import axios from \"axios\";\n\nconst BASE_API_URL = \"http://localhost:5000\";\n\n/* \n  json-server will give you CRUD endpoints on snacks and drinks.\n  Here we've provided you with a single action to get all drinks.\n\n  You'll need to add to this class as you build features for the app.\n*/\n\nclass SnackOrBoozeApi {\n  static async getSnacks() {\n    const result = await axios.get(`${BASE_API_URL}/snacks`);\n    return result.data;\n  }\n\n  static async getDrinks() {\n    const result = await axios.get(`${BASE_API_URL}/drinks`);\n    return result.data;\n  }\n}\n\nexport default SnackOrBoozeApi;\n","import React from \"react\";\nimport \"./NavBar.css\";\nimport { NavLink } from \"react-router-dom\";\nimport { Navbar, Nav, NavItem } from \"reactstrap\";\n\nfunction NavBar() {\n  return (\n    <div>\n      <Navbar expand=\"md\">\n        <NavLink exact to=\"/\" className=\"navbar-brand\">\n          Snack or Booze\n        </NavLink>\n\n        <Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink to=\"/snacks\">Snacks</NavLink>\n          </NavItem>\n\n          <NavItem>\n            <NavLink to=\"/drinks\">Drinks</NavLink>\n          </NavItem>\n        </Nav>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavBar;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./FoodMenu.css\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  CardText,\n  ListGroup,\n  ListGroupItem,\n} from \"reactstrap\";\n\n/*You can pass either snacks or drinks*/\n\nfunction Menu({ items, title }) {\n  const linkName = title.toLowerCase();\n\n  return (\n    <section className=\"col-md-4\">\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            {title} Menu\n          </CardTitle>\n          <CardText>\n            {title} is a great for you. Pick anything you like! Enjoy!\n          </CardText>\n          <ListGroup>\n            {items.map((item) => (\n              <Link to={`/${linkName}/${item.id}`} key={item.id}>\n                <ListGroupItem>{item.name}</ListGroupItem>\n              </Link>\n            ))}\n\n            <Link to={`/${linkName}/new`}>\n              <ListGroupItem>Add a new {linkName}!</ListGroupItem>\n            </Link>\n          </ListGroup>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default Menu;\n","import React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText } from \"reactstrap\";\n/*The item can be drinks or snacks*/\n\nfunction Item({ items, cantFind }) {\n  const { id } = useParams();\n\n  let item = items.find((item) => item.id === id);\n  if (!item) return <Redirect to={cantFind} />;\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            {item.name}\n          </CardTitle>\n          <CardText className=\"font-italic\">{item.description}</CardText>\n          <p>\n            <b>Recipe:</b> {item.recipe}\n          </p>\n          <p>\n            <b>Serve:</b> {item.serve}\n          </p>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default Item;\n","import React from \"react\";\nimport { useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Link } from \"react-router-dom\";\n\nconst AddItemForm = ({ add }) => {\n  /**send value to parent and clear form **/\n  const INITIAL_STATE = { name: \"\", serve: \"\", description: \"\", recipe: \"\" };\n  const [formData, setFormData] = useState(INITIAL_STATE);\n\n  /**we get the type from the route :type  */\n  const { type } = useParams();\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n    add(formData, type);\n    setFormData(INITIAL_STATE);\n  };\n\n  /** Update local state w/curr state of input elem */\n\n  const handleChange = (evt) => {\n    const { name, value } = evt.target;\n    setFormData((fData) => ({\n      ...fData,\n      [name]: value,\n    }));\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div>\n          <label htmlFor=\"name\">Name</label>\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            name=\"name\"\n            value={formData.name}\n            id=\"name\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"serve\">Serve</label>\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            name=\"serve\"\n            id=\"serve\"\n            value={formData.serve}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"description\">Description</label>\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            name=\"description\"\n            value={formData.description}\n            id=\"description\"\n          />\n        </div>\n\n        <div>\n          <label htmlFor=\"recipe\">Recipe</label>\n          <input\n            onChange={handleChange}\n            type=\"text\"\n            name=\"recipe\"\n            value={formData.recipe}\n            id=\"recipe\"\n          />\n        </div>\n        <button\n          id=\"newItemButton\"\n          type=\"submit\"\n          onClick={() => alert(\"sucessfully updated!\")}\n        >\n          Add a new {type}!\n        </button>\n        <button>\n          <Link to={`/${type}`}>back!</Link>\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default AddItemForm;\n","import React from \"react\";\nimport \"./FoodMenu.css\";\n\n/** This the the customr 404 section if the route couldnt find anything match*/\nconst My404 = () => {\n  return (\n    <div className=\"card\">\n      <h1>Hmmm. I can't seem to find what you want.</h1>\n      <img\n        src=\"https://i2.wp.com/learn.onemonth.com/wp-content/uploads/2017/08/1-10.png?w=845&ssl=1\"\n        alt=\"404 page\"\n      />\n    </div>\n  );\n};\n\nexport default My404;\n","import React, { useState, useEffect } from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./App.css\";\nimport Home from \"./Home\";\nimport SnackOrBoozeApi from \"./Api\";\nimport NavBar from \"./NavBar\";\nimport { Route, Switch } from \"react-router-dom\";\nimport Menu from \"./MenuHook\";\nimport Item from \"./ItemHook\";\nimport AddItemForm from \"./AddItemForm\";\nimport { v4 as uuid } from \"uuid\";\nimport My404 from \"./my404\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [snacks, setSnacks] = useState([]);\n  const [drinks, setDrinks] = useState([]);\n\n  /** we use the getSnacks /getDrinks functions to draw from api in api.js */\n  useEffect(() => {\n    async function getSnacks() {\n      let snacks = await SnackOrBoozeApi.getSnacks();\n      setSnacks(snacks);\n      setIsLoading(false);\n    }\n    getSnacks();\n  }, []);\n\n  useEffect(() => {\n    async function getDrinks() {\n      let drinks = await SnackOrBoozeApi.getDrinks();\n      setDrinks(drinks);\n      setIsLoading(false);\n    }\n    getDrinks();\n  }, []);\n\n  /** It is the function pass down to thr form, give it unique id from uuid() */\n  const add = (formData, type) => {\n    if (type === \"snacks\") {\n      setSnacks((snacks) => [...snacks, { ...formData, id: uuid() }]);\n    } else {\n      setDrinks((drinks) => [...drinks, { ...formData, id: uuid() }]);\n    }\n  };\n\n  /** if the data not receiving it will loading */\n  if (isLoading) {\n    return <p>Loading &hellip;</p>;\n  }\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n        <NavBar />\n        <main>\n          <Switch>\n            <Route exact path=\"/\">\n              <Home items={snacks} />\n            </Route>\n\n            <Route exact path=\"/:type/new\">\n              <AddItemForm add={add} />\n            </Route>\n\n            <Route exact path=\"/snacks\">\n              <Menu items={snacks} title=\"Snacks\" />\n            </Route>\n            <Route path=\"/snacks/:id\">\n              <Item items={snacks} cantFind=\"/snacks\" />\n            </Route>\n\n            <Route exact path=\"/drinks\">\n              <Menu items={drinks} title=\"Drinks\" />\n            </Route>\n\n            <Route exact path=\"/drinks/:id\">\n              <Item items={drinks} cantFind=\"/drinks\" />\n            </Route>\n\n            <Route>\n              <My404 />\n            </Route>\n          </Switch>\n        </main>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}